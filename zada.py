print('''
Упражнение 27. Таблица соотношения температур.
 Напишите программу для вывода таблицы 
 соотношения температур, выраженных в градусах
  Цельсия и Фаренгейта.
В таблице должны размещаться все температуры 
между 0 и 100 градусами Цельсия, кратные 10. 
Дополните таблицу подходящими заголовками. 
Формулу для перевода температуры из градусов 
Цельсия в градусы Фаренгейта можно легко найти
 на просторах интернета.
''')
for celsium in range(0, 101, 10):
    print(celsium, ' градусов Цельсия это', (celsium * 9 / 5 + 32), ' градусов по Фаренгейту')
print('-' * 100)

print('''
Упражнение 30. Игра Fizz-Buzz. 
Fizz-Buzz – это известная игра, помогающая детям
освоить в игровой форме правила деления. Участники
садятся в круг, чтобы игра теоретически могла
продолжаться бесконечно. Первый игрок говорит
«Один» и передает ход тому, кто слева. Каждый 
следующий игрок должен мысленно прибавить к 
предыдущему числу единицу и произнести либо его,
либо одно из ключевых слов: Fizz, если число 
без остатка делится на три, или Buzz, если на пять.
Если соблюдаются оба этих условия, он произносит
Fizz-Buzz. Игрок, не сумевший сказать правильное
слово, выбывает из игры. Последний оставшийся 
игрок признается победителем. Разработайте программу,
реализующую алгоритм игры Fizz-Buzz применительно 
к первым 100 числам. Каждый следующий ответ должен 
отображаться на новой строке. 
''')

for num in range(1, 101):
    if num % 3 == 0 and num % 5 == 0:
        print(num, 'Fizz-Buzz')
    elif num % 3 == 0:
        print(num, 'Fizz')
    elif num % 5 == 0:
        print(num, 'Buzz')
    else:
        print(num)
print('-' * 100)

print('''
# Упражнение 33. Таблица умножения. В данном упражнении вы создадите программу 
# для отображения стандартной таблицы умножения от единицы до десяти. При этом 
# ваша таблица умножения должна иметь заголовки над первой строкой и слева от 
# первого столбца. Возможно, для выполнения этого упражнения вам придется 
# озаботиться тем, чтобы выводить значения на экран без принудительного перевода
# каретки на строку ниже. Этого можно добиться, если последним аргументом функции
# print передать end="". Например, инструкция print("A") выведет на экран букву A,
# после чего автоматически перейдет на новую строку, тогда как print("A", end="") 
# не станет переводить каретку, что позволит произвести следующий вывод в той же строке.
''')

for j in range(1, 11):
    print('\nУмножение на ', j)
    for i in range(1, 11):
        z = j * i
        print(j, '*', i, '=', z, '\t', end="")

print('''
# Упражнение 49. Только слова. В данном упражнении вы напишете программу,
# которая будет выделять слова из строки, введенной пользователем. Начните
# с создания функции, принимающей на вход единственный строковый параметр.
# В качестве результата она должна возвращать список слов из строки с
# удаленными знаками препинания, в число которых должны входить точки,
# запятые, восклицательный и вопросительный знаки, дефисы, апострофы,
# двоеточия и точки с запятыми. При этом не нужно избавляться от знаков
# препинания, стоящих внутри слова, таких как апостроф, служащий в английском
# языке для обозначения сокращений. Например, если на вход функции дать строку
# "Contractions include: don’t, isn’t, and wouldn’t.", функция должна вернуть
# следующий список: ["Contractions", "include", "don’t", "isn’t", "and", "wouldn’t"].
# В основной программе, как обычно, должна происходить демонстрация вашей функции.
# Запросите у пользователя строку и выведите на экран все составляющие
# ее слова с удаленными знаками препинания.
''')

my_str = input()



# Упражнение 50. Список уже отсортирован? Напишите функцию, показывающую, отсортирован
# ли переданный ей в качестве параметра список (по возрастанию или убыванию). Функция
# должна возвращать True, если список отсортирован, и False в противном случае.
# В основной программе запросите у пользователя последовательность чисел для списка,
# после чего выведите сообщение о том, является ли этот список отсортированным изначально.
# Примечание. Убедитесь в том, что вы правильно обрабатываете пустые списки, а также списки,
# состоящие из единственного элемента.

# Упражнение 51. Содержит ли список подмножество элементов? Подмножеством элементов,
# или подсписком (sublist), мы будем называть список, являющийся составной частью большего
# списка. Подсписок может содержать один элемент, множество элементов, а также быть пустым.
# Например, [1], [2], [3] и [4] являются подсписками списка [1, 2, 3, 4]. Список [2, 3]
# также входит в состав [1, 2, 3, 4], но при этом список [2, 4] не является подсписком
# [1, 2, 3, 4], поскольку в исходном списке числа 2 и 4 не соседствуют друг с другом.
# Пустой список может быть рассмотрен как подсписок для любого списка. Таким образом,
# список [] является подсписком [1, 2, 3, 4]. Также список является подсписком самого
# себя, то есть [1, 2, 3, 4] – это подсписок для [1, 2, 3, 4]. В рамках данного упражнения
# вам необходимо написать функцию isSublist, определяющую, является ли один список подсписком
# другого. На вход функции должны поступать два списка – larger и smaller. Функция должна
# возвращать значение True только в том случае, если список smaller является подсписком
# списка larger. Напишите также основную программу для демонстрации работы функции.

# Упражнение 52. Все подсписки заданного списка. Используя определение подсписка из упражнения
# 133, напишите функцию, возвращающую список, содержащий все возможные подсписки заданного.
# Например, в число подсписков списка [1, 2, 3] входят следующие:
# [], [1], [2], [3], [1, 2], [2, 3] и [1, 2, 3]. Заметьте, что ваша функция должна вернуть
# как минимум один пустой список, гарантированно являющийся подсписком для
# любого списка. Напишите основную программу, демонстрирующую работу функции
# применительно к нескольким исходным спискам.
